import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '../styles/Map.module.css'
import Button from 'react-bootstrap/Button';
import React, { useState, useEffect } from 'react';
import { registerPlugin } from "@capacitor/core";
import dynamic from 'next/dynamic';
import { LocalNotifications } from '@capacitor/local-notifications';

const BackgroundGeolocation = registerPlugin("BackgroundGeolocation")

const inter = Inter({ subsets: ['latin'] })
const OpenStreetMap = dynamic(() => import('../components/OpenStreetMap'), {
  ssr: false,
})

export default function Map() {

  const [id, setId] = useState(0)
  const [position, setPosition] = useState([])
  const [showPolyline, setShowPolyline] = useState(false)

  useEffect(() => {
    request_permissions()
  }, [])

  function log_for_watcher(text, colour = "gray") {
    const li = document.createElement("li");
    li.style.color = colour;
    li.innerText = ( text);
    const container = document.getElementById("log");
    return container.insertBefore(li, container.firstChild);
  }

  function request_permissions() {
    LocalNotifications.requestPermissions().then(
      function (status) {
        log_for_watcher("Notification permissions " + status.display);
      }
    );
  }

  function make_guess() {
    BackgroundGeolocation.addWatcher(
      {
        backgroundMessage: "Cancel to prevent battery drain.",
        requestPermissions: true,
        stale: true
      },
      function callback(location) {
        if (location === null)
          log_for_watcher("null", Date.now())
        else {
          log_for_watcher([location.latitude.toFixed(4), location.longitude.toFixed(4)].map(String).join(":"))
          setPosition([location.latitude, location.longitude])
        }
      }
    ).then(function retain_callback_id(the_id) {
      setId(the_id);
      //log_for_watcher(the_id)
    });
  }

  return (
    <>
      <Head>
        <title>Geolocation</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main className={`${inter.className} ${styles.main}`}>
        <OpenStreetMap position={position} showPolyline={showPolyline} />
        <div className="border border-secondary mt-3" style={{ height: 80 + 'px', overflow: 'auto', width: 90 + '%' }}>
          <div id="log" className="p-2">Log details...</div>
        </div>
        <div className="row my-2">
          {/* <Button className='col btn-warning me-2' onClick={() => request_permissions()}>PERMISSIONS</Button> */}
          <Button className="col btn-success me-2" onClick={() => { 
            setShowPolyline(false)
            make_guess() }}>START</Button>
          <Button className="col btn-danger" onClick={() => {
            log_for_watcher("Stopping...")
            BackgroundGeolocation.removeWatcher({ id })
            setPosition(null)
            setShowPolyline(true)
          }}>STOP</Button>
        </div>
      </main>
    </>
  )
}
