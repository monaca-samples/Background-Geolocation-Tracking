import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '../styles/Map.module.css'
import Button from 'react-bootstrap/Button';
import React, { useState, useEffect, forwardRef } from 'react';
import { registerPlugin } from "@capacitor/core";
import dynamic from 'next/dynamic';
//import OpenStreetMap from '../components/OpenStreetMap';

const BackgroundGeolocation = registerPlugin("BackgroundGeolocation")
const inter = Inter({ subsets: ['latin'] })
const OpenStreetMap = dynamic(() => import('../components/OpenStreetMap'), {
  ssr: false,
})

const INTERVAL = 10000 //milliseconds

export default function Map() {

  const [stop, setStop] = useState(false)
  const [intervalId, setIntervalId] = useState(-1)
  const started = Date.now()

  useEffect(() => {
    if (stop && intervalId !== -1) {
      console.log("stopped")
      clearInterval(intervalId)
      setIntervalId(-1)
    }
  }, [stop])

  function timestamp(time) {
    return String(Math.floor((time - started) / 1000));
  }

  function log_for_watcher(text, time = Date.now(), colour = "gray") {
    const li = document.createElement("li");
    li.style.color = colour;
    li.innerText = (
      "L" + timestamp(time) + ":W" + timestamp(Date.now()) + ":" + text
    );
    const container = document.getElementById("log");
    return container.insertBefore(li, container.firstChild);
  }

  function make_guess() {
    console.log("make guess")
    return new Promise(function (resolve) {
      let last_location = null;
      let id;
      BackgroundGeolocation.addWatcher(
        {
          requestPermissions: true,
          stale: false
        },
        function callback(location) {
          last_location = location;
        }
      ).then(function retain_callback_id(the_id) {
        id = the_id;
      });

      BackgroundGeolocation.removeWatcher({ id })
      resolve(last_location)
    });
  }

  function startLocationTracking() {
    setStop(false)
    const newIntervalId = setInterval(() => {
      console.log("set interval")
      make_guess().then(function (location) {
        if (location === null)
          log_for_watcher("null", Date.now())
        else log_for_watcher([location.latitude, location.longitude].map(String).join(":"), location.time)
      });
    }, INTERVAL)
    setIntervalId(newIntervalId)
  }

  return (
    <>
      <Head>
        <title>Geolocation</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main className={`${inter.className} ${styles.main}`}>
        <OpenStreetMap />
        <div id="log" className="h-20 w-75 border border-secondary"></div>
        <div className="row">
          <Button className="col btn-success me-3" onClick={() => startLocationTracking()}>START</Button>
          <Button className="col btn-danger" onClick={() => setStop(true)}>STOP</Button>
        </div>
      </main>
    </>
  )
}
